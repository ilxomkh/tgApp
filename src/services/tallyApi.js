import api from './api.js';
import config from '../config.js';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Tally API —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç API –∫–ª—é—á–∏ –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ Tally
 */
class TallyApiService {
  constructor() {
    this.apiBaseUrl = config.API_BASE_URL;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ñ–æ—Ä–º Tally —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
   * @returns {Promise<Array>} - –ú–∞—Å—Å–∏–≤ —Ñ–æ—Ä–º
   */
  async getForms() {
    try {
      const result = await api.getTallyForms();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ - —Ç–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–µ–º { items: [...] }
      if (result && result.items && Array.isArray(result.items)) {
        return result.items;
      } else if (Array.isArray(result)) {
        return result;
      } else {
        console.warn('Unexpected API response structure:', result);
        return [];
      }
    } catch (error) {
      console.error('Error getting Tally forms:', error);
      throw new Error('Failed to get Tally forms from server');
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã –ø–æ ID —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
   * @param {string} formId - ID —Ñ–æ—Ä–º—ã (—Ä–µ–∞–ª—å–Ω—ã–π ID —Ñ–æ—Ä–º—ã Tally, –Ω–∞–ø—Ä–∏–º–µ—Ä '3xqyg9')
   * @returns {Promise<Object>} - –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
   */
  async getFormById(formId) {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID —Ñ–æ—Ä–º—ã Tally, –∞ –Ω–µ –Ω–∞—à –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID
      const result = await api.getTallyFormById(formId);
      return result;
    } catch (error) {
      console.error(`Error getting Tally form ${formId}:`, error);
      throw new Error(`Failed to get Tally form ${formId} from server`);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ä–º–µ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
   * @param {string} formId - ID —Ñ–æ—Ä–º—ã
   * @returns {Promise<Object>} - –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ä–º–µ
   */
  async getFormDetails(formId) {
    try {
      const formDetails = await this.getFormById(formId);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      return {
        formId: formDetails.formId,
        title: formDetails.title,
        questions: formDetails.questions || [],
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        totalQuestions: formDetails.questions ? formDetails.questions.length : 0,
        requiredQuestions: formDetails.questions ? formDetails.questions.filter(q => q.required).length : 0
      };
    } catch (error) {
      console.error(`Error getting form details for ${formId}:`, error);
      
      // Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–æ—Ä–º—ã
      console.log(`üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–ª—è —Ñ–æ—Ä–º—ã ${formId}`);
      return this.getFallbackFormDetails(formId);
    }
  }

  /**
   * Fallback –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ä–º–µ
   * @param {string} formId - ID —Ñ–æ—Ä–º—ã
   * @returns {Object} - –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ä–º–µ
   */
  getFallbackFormDetails(formId) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ ID —Ñ–æ—Ä–º—ã
    const isUzbekForm = formId.includes('uz') || formId === 'wbp8L6';
    const language = isUzbekForm ? 'uz' : 'ru';
    
    console.log(`üìã Fallback —Ñ–æ—Ä–º–∞ –¥–ª—è ${formId}, —è–∑—ã–∫: ${language}`);
    
    return {
      formId: formId,
      title: language === 'ru' ? 'Registration Pro Survey Ru' : 'Registration Pro Survey Uz',
      questions: this.getFallbackQuestions(language),
      totalQuestions: 5,
      requiredQuestions: 3
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ fallback –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ñ–æ—Ä–º—ã
   * @param {string} language - –Ø–∑—ã–∫ (ru/uz)
   * @returns {Array} - –ú–∞—Å—Å–∏–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
   */
  getFallbackQuestions(language) {
    if (language === 'uz') {
      return [
        {
          id: 'gender',
          text: 'Jinsingizni ko\'rsating',
          type: 'choice',
          required: true,
          options: ['Erkak', 'Ayol']
        },
        {
          id: 'age',
          text: 'Yoshingizni kiriting',
          type: 'number',
          required: true
        },
        {
          id: 'social_networks',
          text: 'Qaysi ijtimoiy tarmoqlardan foydalanasiz?',
          type: 'multichoice',
          required: true,
          options: ['Telegram', 'Instagram', 'Facebook', 'TikTok']
        },
        {
          id: 'banking_services',
          text: 'Qaysi bank yoki to\'lov xizmatlaridan foydalanasiz?',
          type: 'multichoice',
          required: true,
          options: ['Payme', 'Click', 'Uzum Bank', 'Humo']
        },
        {
          id: 'interests',
          text: 'Qiziqishlaringiz nima?',
          type: 'text',
          required: false,
          options: ['Texnologiya', 'San\'at', 'Sport', 'Musiqa']
        }
      ];
    } else {
      return [
        {
          id: 'gender',
          text: '–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª',
          type: 'choice',
          required: true,
          options: ['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π']
        },
        {
          id: 'age',
          text: '–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?',
          type: 'number',
          required: true
        },
        {
          id: 'social_networks',
          text: '–ö–∞–∫–∏–µ —Å–æ—Ü. —Å–µ—Ç–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ?',
          type: 'multichoice',
          required: true,
          options: ['Telegram', 'Instagram', 'Facebook', 'TikTok']
        },
        {
          id: 'banking_services',
          text: '–ö–∞–∫–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∏–ª–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ?',
          type: 'multichoice',
          required: true,
          options: ['Payme', 'Click', 'Uzum Bank', 'Humo']
        },
        {
          id: 'interests',
          text: '–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
          type: 'text',
          required: false,
          options: ['–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–ò—Å–∫—É—Å—Å—Ç–≤–æ', '–°–ø–æ—Ä—Ç', '–ú—É–∑—ã–∫–∞']
        }
      ];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
   * @param {string} formId - ID —Ñ–æ—Ä–º—ã
   * @returns {Promise<Array>} - –ú–∞—Å—Å–∏–≤ –æ—Ç–≤–µ—Ç–æ–≤
   */
  async getFormResponses(formId) {
    try {
      const result = await api.getTallyFormResponses(formId);
      return result;
    } catch (error) {
      console.error(`Error getting responses for form ${formId}:`, error);
      throw new Error(`Failed to get responses for form ${formId} from server`);
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Tally —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
   * @param {string} formId - ID —Ñ–æ—Ä–º—ã –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   * @param {string} action - –î–µ–π—Å—Ç–≤–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  async syncData(formId, action = 'sync') {
    try {
      const syncData = {
        formId,
        action
      };
      const result = await api.syncTallyData(syncData);
      return result;
    } catch (error) {
      console.error(`Error syncing data for form ${formId}:`, error);
      throw new Error(`Failed to sync data for form ${formId}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º –¥–ª—è —è–∑—ã–∫–∞ —Å fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
   * @param {string} language - –Ø–∑—ã–∫ (ru/uz)
   * @returns {Promise<Array>} - –ú–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º
   */
  async getAvailableForms(language = 'ru') {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π API
    if (!config.TALLY.SERVER_API.ENABLED) {
      console.log('Server API disabled, using fallback forms');
      return this.getFallbackForms(language);
    }

    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ä–º—ã —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
      const serverForms = await this.getForms();
      
      if (serverForms && serverForms.length > 0) {
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–æ—Ä–º—ã –ø–æ —è–∑—ã–∫—É, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç—Ç–æ
        const filteredForms = serverForms.filter(form => {
          // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ –∏–º–µ–µ—Ç –ø–æ–ª–µ language, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–º—É
          if (form.language) {
            return form.language === language;
          }
          // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —è–∑—ã–∫—É,
          // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ñ–æ—Ä–º—ã
          return true;
        });

        return filteredForms.map(form => {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–æ—Ä–º—ã
          const detectedLanguage = form.name && form.name.toLowerCase().includes('uz') ? 'uz' : 'ru';
          
          return {
            id: form.id, // –∏—Å–ø–æ–ª—å–∑—É–µ–º ID —Å —Å–µ—Ä–≤–µ—Ä–∞
            formId: form.id, // —Ä–µ–∞–ª—å–Ω—ã–π ID —Ñ–æ—Ä–º—ã Tally
            title: form.name || '–û–ø—Ä–æ—Å',
            description: `–°—Ç–∞—Ç—É—Å: ${form.status}, –û—Ç–≤–µ—Ç–æ–≤: ${form.numberOfSubmissions}`,
            type: 'registration',
            url: `https://tally.so/forms/${form.id}`,
            language: detectedLanguage,
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–∑–∞—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —è–∑—ã–∫–∞
            prizeInfo: {
              basePrize: 20000,
              additionalPrize: 5000,
              lotteryAmount: 3000000,
              lotteryEligible: true
            },
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞
            serverInfo: {
              status: form.status,
              numberOfSubmissions: form.numberOfSubmissions,
              createdAt: form.createdAt,
              updatedAt: form.updatedAt,
              isClosed: form.isClosed
            }
          };
        });
      }
    } catch (error) {
      console.warn('Failed to get forms from server, using fallback:', error);
    }

    // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    return this.getFallbackForms(language);
  }

  /**
   * Fallback –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   * @param {string} language - –Ø–∑—ã–∫ (ru/uz)
   * @returns {Array} - –ú–∞—Å—Å–∏–≤ —Ñ–æ—Ä–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  getFallbackForms(language = 'ru') {
    const formIds = config.TALLY.FORM_IDS;
    
    return [
      {
        id: 'registration',
        formId: formIds[language] || formIds.ru,
        title: language === 'ru' ? '–¢–µ–º–∞: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' : 'Mavzu: Ro\'yxatdan o\'tish',
        description: language === 'ru' 
          ? '–ë–∞–∑–æ–≤—ã–π –æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' 
          : 'Foydalanuvchilarni ro\'yxatdan o\'tkazish uchun asosiy so\'rov',
        type: 'registration',
        url: `https://tally.so/forms/${formIds[language] || formIds.ru}`,
        language,
        prizeInfo: {
          basePrize: 20000,
          additionalPrize: 5000,
          lotteryAmount: 3000000,
          lotteryEligible: true
        }
      }
    ];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ URL —Ñ–æ—Ä–º—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
   * @param {string} language - –Ø–∑—ã–∫ (ru/uz)
   * @param {string} formId - ID —Ñ–æ—Ä–º—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns {string} - URL —Ñ–æ—Ä–º—ã
   */
  getFormUrl(language = 'ru', formId = null) {
    const formIds = config.TALLY.FORM_IDS;
    const defaultFormId = formIds[language] || formIds.ru;
    const targetFormId = formId || defaultFormId;
    return `https://tally.so/forms/${targetFormId}`;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö ID —Ñ–æ—Ä–º —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞
   * @returns {Promise<Object>} - –û–±—ä–µ–∫—Ç —Å –º–∞–ø–ø–∏–Ω–≥–æ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö ID –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID Tally
   */
  async getFormIdMapping() {
    try {
      const serverForms = await this.getForms();
      const mapping = {};
      
      serverForms.forEach(form => {
        const realId = form.id || form.formId;
        // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–æ—Ä–º
        if (form.title && form.title.toLowerCase().includes('—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')) {
          mapping['registration'] = realId;
        }
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –º–∞–ø–ø–∏–Ω–≥–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –¥—Ä—É–≥–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        mapping[realId] = realId; // –ü—Ä—è–º–æ–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö ID
      });
      
      return mapping;
    } catch (error) {
      console.warn('Failed to get form ID mapping from server:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –º–∞–ø–ø–∏–Ω–≥ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      return {
        'registration': config.TALLY.FORM_IDS.ru || '3xqyg9'
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ API
   * @returns {Promise<boolean>} - –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π API
   */
  async isServerApiAvailable() {
    try {
      await this.getForms();
      return true;
    } catch (error) {
      return false;
    }
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
const tallyApiService = new TallyApiService();

export default tallyApiService;
