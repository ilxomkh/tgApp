import api from './api.js';
import config from '../config.js';
import { detectFormLanguage, filterFormsByLanguage } from '../utils/languageDetection.js';
import { isSurveyCompleted } from '../utils/completedSurveys.js';
import { shouldHideSurveyDueToGroup } from '../utils/surveyGroups.js';

class TallyApiService {
  constructor() {
    this.apiBaseUrl = config.API_BASE_URL;
  }

  /**
   * @returns {Promise<Array>}
   */
  async getForms() {
    try {
      const result = await api.getTallyForms();
      
      if (result && result.items && Array.isArray(result.items)) {
        return result.items;
      } else if (Array.isArray(result)) {
        return result;
      } else {
        console.warn('Unexpected API response structure:', result);
        return [];
      }
    } catch (error) {
      console.error('Error getting Tally forms:', error);
      throw new Error('Failed to get Tally forms from server');
    }
  }

  /**
   * @param {string} formId
   * @returns {Promise<Object>}
   */
  async getFormById(formId) {
    try {
      const result = await api.getTallyFormById(formId);
      return result;
    } catch (error) {
      console.error(`Error getting Tally form ${formId}:`, error);
      throw new Error(`Failed to get Tally form ${formId} from server`);
    }
  }

  /**
   * @param {string} formId
   * @returns {Promise<Object>}
   */
  async getFormDetails(formId) {
    try {
      const formDetails = await this.getFormById(formId);
      
      return {
        formId: formDetails.formId,
        title: formDetails.title,
        questions: formDetails.questions || [],
        totalQuestions: formDetails.questions ? formDetails.questions.length : 0,
        requiredQuestions: formDetails.questions ? formDetails.questions.filter(q => q.required).length : 0
      };
    } catch (error) {
      console.error(`Error getting form details for ${formId}:`, error);
      
      return this.getFallbackFormDetails(formId);
    }
  }

  /**
   * @param {string} formId
   * @returns {Object}
   */
  getFallbackFormDetails(formId) {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ - –Ω–∏–∫–∞–∫–∏—Ö –º–æ–∫ –¥–∞–Ω–Ω—ã—Ö
    console.warn(`getFallbackFormDetails called for ${formId} - returning empty data (no mock data)`);
    return {
      formId: formId,
      title: '–û–ø—Ä–æ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
      questions: [],
      totalQuestions: 0,
      requiredQuestions: 0
    };
  }

  /**
   * @param {string} language
   * @returns {Array}
   */
  getFallbackQuestions(language) {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ - –Ω–∏–∫–∞–∫–∏—Ö –º–æ–∫ –¥–∞–Ω–Ω—ã—Ö
    console.warn('getFallbackQuestions called - returning empty array (no mock data)');
    return [];
  }

  /**
   * @param {string} formId
   * @returns {Promise<Array>}
   */
  async getFormResponses(formId) {
    try {
      const result = await api.getTallyFormResponses(formId);
      return result;
    } catch (error) {
      console.error(`Error getting responses for form ${formId}:`, error);
      throw new Error(`Failed to get responses for form ${formId} from server`);
    }
  }

  /**
   * @param {string} formId
   * @param {string} action
   * @returns {Promise<Object>}
   */
  async syncData(formId, action = 'sync') {
    try {
      const syncData = {
        formId,
        action
      };
      const result = await api.syncTallyData(syncData);
      return result;
    } catch (error) {
      console.error(`Error syncing data for form ${formId}:`, error);
      throw new Error(`Failed to sync data for form ${formId}`);
    }
  }

  /**
   * @param {string} language
   * @returns {Promise<Array>}
   */
  async getAvailableForms(language = 'ru') {
    if (!config.TALLY.SERVER_API.ENABLED) {
      console.warn('Server API is disabled, returning empty array');
      return [];
    }

    try {
      const serverForms = await this.getForms();
      
      if (serverForms && serverForms.length > 0) {
        const filteredForms = filterFormsByLanguage(serverForms, language);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ
        const availableForms = [];
        
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º ${filteredForms.length} –æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...`);
        
        for (const form of filteredForms) {
          console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ä–æ—Å ${form.id} (${form.name})`);
          
          // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
          if (isSurveyCompleted(form.id)) {
            console.log(`üìù –û–ø—Ä–æ—Å ${form.id} —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω (–ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)`);
            continue;
          }
          
          // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
          console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø—Ä–æ—Å–∞ ${form.id} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...`);
          const isCompleted = await this.checkSurveyStatus(form.id);
          if (isCompleted) {
            console.log(`üìù –û–ø—Ä–æ—Å ${form.id} —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω (—Å–µ—Ä–≤–µ—Ä) - –∏—Å–∫–ª—é—á–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞`);
            continue;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –æ–ø—Ä–æ—Å–æ–≤
          if (shouldHideSurveyDueToGroup(form.id)) {
            console.log(`üìù –û–ø—Ä–æ—Å ${form.id} —Å–∫—Ä—ã—Ç –∏–∑-–∑–∞ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ (–¥—Ä—É–≥–æ–π –æ–ø—Ä–æ—Å –∏–∑ –≥—Ä—É–ø–ø—ã —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω)`);
            continue;
          }
          
          console.log(`‚úÖ –û–ø—Ä–æ—Å ${form.id} –¥–æ—Å—Ç—É–ø–µ–Ω - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫`);
          
          const detectedLanguage = detectFormLanguage(form.name);
          const titlePrefix = detectedLanguage === 'ru' ? '–¢–µ–º–∞: ' : 'Mavzu: ';
          
          availableForms.push({
            id: form.id,
            formId: form.id,
            title: `${titlePrefix}${form.name || '–û–ø—Ä–æ—Å'}`,
            description: `–°—Ç–∞—Ç—É—Å: ${form.status}, –û—Ç–≤–µ—Ç–æ–≤: ${form.numberOfSubmissions}`,
            type: 'registration',
            url: `https://tally.so/forms/${form.id}`,
            language: detectedLanguage,
            prizeInfo: {
              basePrize: 20000,
              additionalPrize: 5000,
              lotteryAmount: 3000000,
              lotteryEligible: true
            },
            serverInfo: {
              status: form.status,
              numberOfSubmissions: form.numberOfSubmissions,
              createdAt: form.createdAt,
              updatedAt: form.updatedAt,
              isClosed: form.isClosed
            }
          });
        }
        
        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –∏–∑ ${filteredForms.length} –æ–ø—Ä–æ—Å–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ ${availableForms.length}`);
        return availableForms;
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ä–º —Å —Å–µ—Ä–≤–µ—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      console.warn('No forms received from server');
      return [];
    } catch (error) {
      console.warn('Failed to get forms from server:', error);
      return [];
    }
  }

  /**
   * @param {string} language
   * @returns {Array}
   */
  getFallbackForms(language = 'ru') {
    const formIds = config.TALLY.FORM_IDS;
    
    return [
      {
        id: 'registration',
        formId: formIds[language] || formIds.ru,
        title: language === 'ru' ? '–¢–µ–º–∞: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' : 'Mavzu: Ro\'yxatdan o\'tish',
        description: language === 'ru' 
          ? '–ë–∞–∑–æ–≤—ã–π –æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' 
          : 'Foydalanuvchilarni ro\'yxatdan o\'tkazish uchun asosiy so\'rov',
        type: 'registration',
        url: `https://tally.so/forms/${formIds[language] || formIds.ru}`,
        language,
        prizeInfo: {
          basePrize: 20000,
          additionalPrize: 5000,
          lotteryAmount: 3000000,
          lotteryEligible: true
        }
      }
    ];
  }

  /**
   * @param {string} language
   * @param {string} formId
   * @returns {string}
   */
  getFormUrl(language = 'ru', formId = null) {
    const formIds = config.TALLY.FORM_IDS;
    const defaultFormId = formIds[language] || formIds.ru;
    const targetFormId = formId || defaultFormId;
    return `https://tally.so/forms/${targetFormId}`;
  }

  /**
   * @returns {Promise<Object>}
   */
  async getFormIdMapping() {
    try {
      const serverForms = await this.getForms();
      const mapping = {};
      
      serverForms.forEach(form => {
        const realId = form.id || form.formId;
        if (form.title && form.title.toLowerCase().includes('—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')) {
          mapping['registration'] = realId;
        }
        mapping[realId] = realId;
      });
      
      return mapping;
    } catch (error) {
      console.warn('Failed to get form ID mapping from server:', error);
      return {
        'registration': config.TALLY.FORM_IDS.ru || '3xqyg9'
      };
    }
  }

  /**
   * @returns {Promise<boolean>}
   */
  async isServerApiAvailable() {
    try {
      await this.getForms();
      return true;
    } catch (error) {
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–ø—Ä–æ—Å–∞ - –ø—Ä–æ–π–¥–µ–Ω –ª–∏ –æ–Ω —É–∂–µ
   * @param {string} formId - ID –æ–ø—Ä–æ—Å–∞
   * @returns {Promise<boolean>} true –µ—Å–ª–∏ –æ–ø—Ä–æ—Å —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω
   */
  async checkSurveyStatus(formId) {
    try {
      // –î–µ–ª–∞–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
      const response = await api.getTallyFormById(formId);
      console.log(`‚úÖ –û–ø—Ä–æ—Å ${formId} –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ API`);
      return false; // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ, –∑–Ω–∞—á–∏—Ç –æ–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–µ–Ω
    } catch (error) {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø—Ä–æ—Å–∞ ${formId}:`, error.message);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
      if (error.message && error.message.includes('–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç–æ—Ç –æ–ø—Ä–æ—Å')) {
        console.log(`üìù –û–ø—Ä–æ—Å ${formId} —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω - –∏—Å–∫–ª—é—á–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞`);
        return true; // –û–ø—Ä–æ—Å —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω
      }
      
      // –î–ª—è –æ—à–∏–±–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ù–ï —Å–∫—Ä—ã–≤–∞–µ–º –æ–ø—Ä–æ—Å
      if (error.message && (
        error.message.includes('–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ Telegram') ||
        error.message.includes('–õ–∏—á–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞') ||
        error.message.includes('Unauthorized') ||
        error.message.includes('401')
      )) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –æ–ø—Ä–æ—Å–∞ ${formId} - –ù–ï —Å–∫—Ä—ã–≤–∞–µ–º –æ–ø—Ä–æ—Å`);
        return false; // –ù–µ —Å–∫—Ä—ã–≤–∞–µ–º –æ–ø—Ä–æ—Å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      }
      
      // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ (500, —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏) —Ç–æ–∂–µ –Ω–µ —Å–∫—Ä—ã–≤–∞–µ–º
      console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø—Ä–æ—Å–∞ ${formId}: ${error.message} - –ù–ï —Å–∫—Ä—ã–≤–∞–µ–º –æ–ø—Ä–æ—Å`);
      return false; // –ù–µ —Å–∫—Ä—ã–≤–∞–µ–º –æ–ø—Ä–æ—Å –ø—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö
    }
  }
}

const tallyApiService = new TallyApiService();

export default tallyApiService;
