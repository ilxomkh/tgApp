import React, { useState, useEffect, useRef } from 'react';
import { useLanguage } from '../contexts/LanguageContext.jsx';
import tallyApiService from '../services/tallyApi.js';
import { useSurvey } from '../hooks/useSurvey.js';
import { useHapticClick } from '../utils/hapticFeedback';

const TallySurvey = ({ surveyId, onComplete, onClose }) => {
  const { language } = useLanguage();
  const { submitSurvey, loading: submitLoading, error: submitError } = useSurvey();
  const [survey, setSurvey] = useState(null);
  const [formDetails, setFormDetails] = useState(null);
  const [answers, setAnswers] = useState({});
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [isFormSubmitted, setIsFormSubmitted] = useState(false);
  const [isKeyboardOpen, setIsKeyboardOpen] = useState(false);
  const [loading, setLoading] = useState(true); // –°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–∞
  const [error, setError] = useState(null);
  const hapticClick = useHapticClick();
  const inputRef = useRef(null);
  const [shouldMaintainFocus, setShouldMaintainFocus] = useState(false);
  const answersRef = useRef({}); // Ref –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –±–µ–∑ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞

  useEffect(() => {
    console.log('üöÄ Starting survey load for surveyId:', surveyId);
    setLoading(true);
    setError(null);
    
    const loadSurvey = async () => {
      try {
        console.log('üì° Fetching form details from API...');
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API
        const details = await tallyApiService.getFormDetails(surveyId);
        console.log('‚úÖ Form details loaded successfully:', details);
        
        setFormDetails(details);
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        const surveyData = {
          id: surveyId,
          title: details.title,
          type: 'tally',
          formId: details.formId,
          questions: details.questions
        };
        
        console.log('üìä Survey data created:', surveyData);
        setSurvey(surveyData);
        console.log('‚úÖ Survey loading completed successfully');
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø—Ä–æ—Å–∞:', err);
        setError(err.message);
        
        // Fallback: —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–ø—Ä–æ—Å–∞
        console.log('üîÑ Using fallback form details...');
        const fallbackDetails = tallyApiService.getFallbackFormDetails(surveyId);
        
        setFormDetails(fallbackDetails);
        
        const surveyData = {
          id: surveyId,
          title: fallbackDetails.title,
          type: 'tally',
          formId: fallbackDetails.formId,
          questions: fallbackDetails.questions
        };
        
        console.log('üìä Fallback survey data created:', surveyData);
        setSurvey(surveyData);
        console.log('‚úÖ Fallback survey loading completed');
      } finally {
        setLoading(false);
        console.log('üèÅ Survey loading finished, loading set to false');
      }
    };

    loadSurvey();
  }, [surveyId]);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
  useEffect(() => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É viewport
    const initialViewportHeight = window.innerHeight;
    
    const handleResize = () => {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é –≤—ã—Å–æ—Ç—ã viewport
      const currentViewportHeight = window.visualViewport?.height || window.innerHeight;
      
      // –ï—Å–ª–∏ –≤—ã—Å–æ—Ç–∞ —É–º–µ–Ω—å—à–∏–ª–∞—Å—å –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 150px, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–∞
      const keyboardThreshold = 150;
      const isKeyboardVisible = initialViewportHeight - currentViewportHeight > keyboardThreshold;
      
      console.log('üîç Keyboard resize detected:', {
        initialHeight: initialViewportHeight,
        currentHeight: currentViewportHeight,
        difference: initialViewportHeight - currentViewportHeight,
        threshold: keyboardThreshold,
        isKeyboardVisible,
        timestamp: new Date().toISOString()
      });
      
      setIsKeyboardOpen(isKeyboardVisible);
    };

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ viewport
    if (window.visualViewport) {
      window.visualViewport.addEventListener('resize', handleResize);
    } else {
      window.addEventListener('resize', handleResize);
    }

    // –¢–∞–∫–∂–µ —Å–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Ñ–æ–∫—É—Å–∞ –Ω–∞ –∏–Ω–ø—É—Ç–∞—Ö
    const handleFocusIn = (e) => {
      if (e.target.tagName === 'INPUT') {
        console.log('üéØ Input focus IN detected:', {
          inputType: e.target.type,
          inputValue: e.target.value,
          timestamp: new Date().toISOString()
        });
        
        // –î–ª—è –ø–æ–ª–µ–π —Ç–∏–ø–∞ number –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        const delay = e.target.type === 'number' ? 50 : 100;
        
        setTimeout(() => {
          const currentViewportHeight = window.visualViewport?.height || window.innerHeight;
          const isKeyboardVisible = currentViewportHeight < window.innerHeight * 0.75;
          
          console.log('üéØ Focus IN - Keyboard state:', {
            currentHeight: currentViewportHeight,
            windowHeight: window.innerHeight,
            threshold: window.innerHeight * 0.75,
            isKeyboardVisible,
            inputType: e.target.type,
            timestamp: new Date().toISOString()
          });
          
          setIsKeyboardOpen(isKeyboardVisible);
        }, delay);
      }
    };

    const handleFocusOut = (e) => {
      console.log('üéØ Input focus OUT detected:', {
        target: e.target.tagName,
        inputType: e.target.type,
        inputValue: e.target.value,
        timestamp: new Date().toISOString()
      });
      
      // –î–ª—è –ø–æ–ª–µ–π —Ç–∏–ø–∞ number –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ—Ç–µ—Ä—é —Ñ–æ–∫—É—Å–∞
      if (e.target.type === 'number') {
        console.log('üö´ Preventing focus loss for number input');
        setTimeout(() => {
          if (e.target && document.contains(e.target)) {
            e.target.focus();
          }
        }, 0);
      }
      
      // –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –∑–∞–∫—Ä–æ–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—Ç
      // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–∫—Ä—ã—Ç–æ–π –¥–ª—è –ª—É—á—à–µ–≥–æ UX
    };

    document.addEventListener('focusin', handleFocusIn);
    document.addEventListener('focusout', handleFocusOut);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è iOS Safari
    const handleOrientationChange = () => {
      setTimeout(() => {
        const currentViewportHeight = window.visualViewport?.height || window.innerHeight;
        const isKeyboardVisible = currentViewportHeight < window.innerHeight * 0.75;
        setIsKeyboardOpen(isKeyboardVisible);
      }, 500); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞
    };

    window.addEventListener('orientationchange', handleOrientationChange);

    return () => {
      if (window.visualViewport) {
        window.visualViewport.removeEventListener('resize', handleResize);
      } else {
        window.removeEventListener('resize', handleResize);
      }
      document.removeEventListener('focusin', handleFocusIn);
      document.removeEventListener('focusout', handleFocusOut);
      window.removeEventListener('orientationchange', handleOrientationChange);
    };
  }, []);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ–∫—É—Å–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
  useEffect(() => {
    if (shouldMaintainFocus && inputRef.current) {
      console.log('üîÑ Restoring focus after re-render for number input');
      setTimeout(() => {
        if (inputRef.current) {
          inputRef.current.focus();
          setShouldMaintainFocus(false);
        }
      }, 0);
    }
  }, [answers, shouldMaintainFocus]);

  const handleAnswerChange = (questionId, value) => {
    console.log('üìù Answer changed:', {
      questionId,
      value,
      timestamp: new Date().toISOString()
    });
    
    hapticClick();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    const currentQuestion = formDetails?.questions?.find(q => q.id === questionId);
    const questionType = currentQuestion ? getQuestionType(currentQuestion) : 'unknown';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º ref –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
    answersRef.current = {
      ...answersRef.current,
      [questionId]: value
    };
    
    // –î–ª—è –ø–æ–ª–µ–π —Ç–∏–ø–∞ number –ù–ï –≤—ã–∑—ã–≤–∞–µ–º setState, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    if (questionType === 'number') {
      console.log('üî¢ Number input - avoiding re-render, storing in ref only');
      return; // –í—ã—Ö–æ–¥–∏–º –±–µ–∑ –≤—ã–∑–æ–≤–∞ setState
    }
    
    // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤—ã–∑—ã–≤–∞–µ–º setState –∫–∞–∫ –æ–±—ã—á–Ω–æ
    setAnswers(prev => ({
      ...prev,
      [questionId]: value
    }));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
  const isCurrentQuestionValid = () => {
    if (!formDetails || !formDetails.questions) return false;
    
    const currentQuestion = formDetails.questions[currentQuestionIndex];
    if (!currentQuestion) return false;
    
    const questionType = getQuestionType(currentQuestion);
    
    // –î–ª—è –ø–æ–ª–µ–π —Ç–∏–ø–∞ number –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ ref
    const answer = questionType === 'number' 
      ? answersRef.current[currentQuestion.id] 
      : answers[currentQuestion.id];
    
    // –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π, –≤—Å–µ–≥–¥–∞ –≤–∞–ª–∏–¥–µ–Ω
    if (!currentQuestion.required) return true;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
    switch (questionType) {
      case 'choice':
        return answer && answer.trim() !== '';
      case 'multichoice':
        return Array.isArray(answer) && answer.length > 0;
      case 'text':
        // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–ø—Ü–∏–∏
        if (currentQuestion.options && currentQuestion.options.length > 0) {
          return answer && answer.trim() !== '';
        }
        return answer && answer.trim() !== '';
      case 'number':
        return answer !== null && answer !== undefined && answer !== '';
      default:
        return answer && answer.trim() !== '';
    }
  };

  const handleNextQuestion = () => {
    console.log('‚û°Ô∏è Next question clicked:', {
      currentIndex: currentQuestionIndex,
      totalQuestions: formDetails.questions.length,
      timestamp: new Date().toISOString()
    });
    
    if (currentQuestionIndex < formDetails.questions.length - 1) {
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ ref –≤ state –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
      setAnswers(prev => ({ ...prev, ...answersRef.current }));
      
      setCurrentQuestionIndex(prev => prev + 1);
      console.log('‚û°Ô∏è Moving to next question - keeping keyboard open');
      // –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –∑–∞–∫—Ä–æ–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—Ç
    }
  };

  const handlePreviousQuestion = () => {
    console.log('‚¨ÖÔ∏è Previous question clicked:', {
      currentIndex: currentQuestionIndex,
      totalQuestions: formDetails.questions.length,
      timestamp: new Date().toISOString()
    });
    
    if (currentQuestionIndex > 0) {
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ ref –≤ state –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
      setAnswers(prev => ({ ...prev, ...answersRef.current }));
      
      setCurrentQuestionIndex(prev => prev - 1);
      console.log('‚¨ÖÔ∏è Moving to previous question - keeping keyboard open');
      // –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –∑–∞–∫—Ä–æ–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—Ç
    }
  };

  const handleFormSubmit = async () => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º formId –∏–∑ formDetails –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const formId = formDetails.formId;
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state –∏ ref –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const allAnswers = { ...answers, ...answersRef.current };
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const submitData = {
        formId,
        answers: allAnswers,
        language,
        submittedAt: new Date().toISOString(),
        userId: null, // –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ useSurvey hook
      const result = await submitSurvey(formId, allAnswers);
      setIsFormSubmitted(true);
      
      if (onComplete) {
        onComplete(result);
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞:', err);
      console.error('‚ùå JSON –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:');
      console.error(JSON.stringify({
        formId: formDetails?.formId,
        answers: { ...answers, ...answersRef.current },
        language: language,
        submittedAt: new Date().toISOString()
      }, null, 2));
    }
  };

  // –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏
  const CustomRadio = ({ checked, onChange, value, label }) => (
    <label className="flex items-center space-x-4 cursor-pointer p-4 rounded-xl border-2 border-gray-200 hover:border-[#7C65FF] hover:bg-[#7C65FF]/5 transition-all duration-200 group active:scale-95">
      <div className="relative">
        <input
          type="radio"
          checked={checked}
          onChange={onChange}
          value={value}
          className="sr-only"
        />
        <div className={`w-6 h-6 rounded-full border-2 transition-all duration-200 ${
          checked 
            ? 'border-[#7C65FF] bg-[#7C65FF] scale-110' 
            : 'border-gray-300 group-hover:border-[#7C65FF]'
        }`}>
          {checked && (
            <div className="w-3 h-3 bg-white rounded-full absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 animate-pulse" />
          )}
        </div>
      </div>
      <span className={`font-medium transition-colors ${
        checked ? 'text-[#7C65FF]' : 'text-gray-700 group-hover:text-[#7C65FF]'
      }`}>
        {label}
      </span>
    </label>
  );

  // –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —á–µ–∫–±–æ–∫—Å–∞
  const CustomCheckbox = ({ checked, onChange, value, label }) => (
    <label className="flex items-center space-x-4 cursor-pointer p-4 rounded-xl border-2 border-gray-200 hover:border-[#7C65FF] hover:bg-[#7C65FF]/5 transition-all duration-200 group active:scale-95">
      <div className="relative">
        <input
          type="checkbox"
          checked={checked}
          onChange={onChange}
          value={value}
          className="sr-only"
        />
        <div className={`w-6 h-6 rounded border-2 transition-all duration-200 ${
          checked 
            ? 'border-[#7C65FF] bg-[#7C65FF] scale-110' 
            : 'border-gray-300 group-hover:border-[#7C65FF]'
        }`}>
          {checked && (
            <svg className="w-4 h-4 text-white absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 animate-bounce" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
            </svg>
          )}
        </div>
      </div>
      <span className={`font-medium transition-colors ${
        checked ? 'text-[#7C65FF]' : 'text-gray-700 group-hover:text-[#7C65FF]'
      }`}>
        {label}
      </span>
    </label>
  );

  // –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω–ø—É—Ç–∞
  const CustomInput = ({ type, value, onChange, placeholder, className = "", onKeyPress }) => (
    <div className="relative">
      <input
        ref={inputRef}
        type={type}
        value={value || ''}
        onChange={onChange}
        onKeyPress={onKeyPress}
        onBlur={(e) => {
          // –î–ª—è –ø–æ–ª–µ–π —Ç–∏–ø–∞ number –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ—Ç–µ—Ä—é —Ñ–æ–∫—É—Å–∞
          if (type === 'number') {
            console.log('üö´ Number input blur prevented');
            setTimeout(() => {
              if (e.target && document.contains(e.target)) {
                e.target.focus();
              }
            }, 0);
          }
        }}
        className={`w-full p-4 border-2 border-gray-200 rounded-xl focus:ring-2 focus:ring-[#7C65FF] focus:border-[#7C65FF] transition-all duration-200 text-center text-lg font-medium bg-white focus:scale-105 ${className}`}
        placeholder={placeholder}
        autoComplete="off"
        inputMode={type === 'number' ? 'numeric' : 'text'}
        enterKeyHint={type === 'number' ? 'done' : 'next'}
        autoFocus={false}
        pattern={type === 'number' ? '[0-9]*' : undefined}
        step={type === 'number' ? '1' : undefined}
      />
      <div className="absolute inset-0 rounded-xl bg-gradient-to-r from-[#7C65FF]/5 to-[#5538F9]/5 pointer-events-none opacity-0 focus-within:opacity-100 transition-opacity duration-200" />
    </div>
  );

  // –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
  const texts = {
    ru: {
      questionCounter: '–í–æ–ø—Ä–æ—Å',
      of: '–∏–∑',
      requiredField: '–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è',
      keyboardHint: 'üí° –û–ø—Ä–æ—Å–Ω–∏–∫ –ø–æ–¥–Ω—è—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤–≤–æ–¥–∞',
      enterNumber: '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ',
      enterAnswer: '–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç',
      back: '‚Üê –ù–∞–∑–∞–¥',
      next: '–î–∞–ª–µ–µ ‚Üí',
      finish: '‚úì –ó–∞–≤–µ—Ä—à–∏—Ç—å',
      submitting: '–û—Ç–ø—Ä–∞–≤–∫–∞...',
      thankYou: '–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.',
      loadingError: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø—Ä–æ—Å–∞',
      surveyError: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞'
    },
    uz: {
      questionCounter: 'Savol',
      of: 'dan',
      requiredField: 'Bu savol to\'ldirish majburiy',
      keyboardHint: 'üí° So\'rovnoma kiritish uchun ko\'tarildi',
      enterNumber: 'Raqam kiriting',
      enterAnswer: 'Javob kiriting',
      back: '‚Üê Orqaga',
      next: 'Keyingi ‚Üí',
      finish: '‚úì Yakunlash',
      submitting: 'Yuborilmoqda...',
      thankYou: 'Rahmat! Javobingiz yuborildi.',
      loadingError: 'So\'rovni yuklashda xatolik',
      surveyError: 'So\'rovni yuborishda xatolik'
    }
  };

  const t = texts[language] || texts.ru;

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è Enter –¥–ª—è –∏–Ω–ø—É—Ç–æ–≤
  const handleKeyPress = (e) => {
    console.log('‚å®Ô∏è Key press detected:', {
      key: e.key,
      target: e.target.tagName,
      inputType: e.target.type,
      inputValue: e.target.value,
      timestamp: new Date().toISOString()
    });
    
    // –î–ª—è –ø–æ–ª–µ–π —Ç–∏–ø–∞ number –ø–æ–∑–≤–æ–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ Enter
    // –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    if (e.key === 'Enter' && e.target.type === 'number') {
      console.log('‚å®Ô∏è Enter key on number input - allowing default behavior');
      return; // –ù–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    }
    
    if (e.key === 'Enter') {
      e.preventDefault();
      console.log('‚å®Ô∏è Enter key prevented default behavior - keeping keyboard open');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
  const getQuestionType = (question) => {
    const type = question.type?.toLowerCase();
    
    // –ï—Å–ª–∏ —Ç–∏–ø —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω –∫–∞–∫ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
    if (['multichoice', 'multiple_choice', 'checkbox'].includes(type)) {
      return 'multichoice';
    }
    
    // –ï—Å–ª–∏ —Ç–∏–ø —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
    if (['choice', 'single_choice', 'radio'].includes(type)) {
      return 'choice';
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ —Ç–µ–∫—Å—Ç—É –≤–æ–ø—Ä–æ—Å–∞
    const questionText = question.text?.toLowerCase() || '';
    const multipleChoiceKeywords = [
      '–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ',
      '–≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ',
      '–æ—Ç–º–µ—Ç—å—Ç–µ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ',
      '–º–æ–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ',
      '–Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤',
      '–≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ',
      '–æ—Ç–º–µ—Ç—å—Ç–µ –≤—Å–µ'
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
    const isMultipleChoice = multipleChoiceKeywords.some(keyword => 
      questionText.includes(keyword)
    );
    
    if (isMultipleChoice) {
      return 'multichoice';
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø—Ü–∏–∏ –∏ —Ç–∏–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, —Å—á–∏—Ç–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–º –≤—ã–±–æ—Ä–æ–º
    if (question.options && question.options.length > 0) {
      return 'choice';
    }
    
    return type || 'text';
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
  const QuestionComponent = ({ question }) => {
    const questionType = getQuestionType(question);
    
    // –î–ª—è –ø–æ–ª–µ–π —Ç–∏–ø–∞ number –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ ref, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –∏–∑ state
    const currentAnswer = questionType === 'number' 
      ? answersRef.current[question.id] 
      : answers[question.id];

    const renderQuestionInput = () => {
      switch (questionType) {
        case 'choice':
          return (
            <div className="space-y-3">
              {question.options?.map((option, index) => (
                <CustomRadio
                  key={index}
                    checked={currentAnswer === option}
                    onChange={(e) => handleAnswerChange(question.id, e.target.value)}
                  value={option}
                  label={option}
                  />
              ))}
            </div>
          );

        case 'multichoice':
          return (
            <div className="space-y-3">
              {question.options?.map((option, index) => (
                <CustomCheckbox
                  key={index}
                    checked={Array.isArray(currentAnswer) && currentAnswer.includes(option)}
                    onChange={(e) => {
                      const currentValues = Array.isArray(currentAnswer) ? currentAnswer : [];
                      const newValues = e.target.checked
                        ? [...currentValues, option]
                        : currentValues.filter(v => v !== option);
                      handleAnswerChange(question.id, newValues);
                    }}
                  value={option}
                  label={option}
                  />
              ))}
            </div>
          );

        case 'number':
          return (
            <CustomInput
              type="number"
              value={currentAnswer || ''}
              onChange={(e) => handleAnswerChange(question.id, e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={t.enterNumber}
              className="focus:outline-none focus:ring-0 focus:border-[#7C65FF]"
            />
          );

        case 'text':
          // –ï—Å–ª–∏ —É —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –µ—Å—Ç—å –æ–ø—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –∫–∞–∫ —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏
          if (question.options && question.options.length > 0) {
          return (
            <div className="space-y-3">
                {question.options.map((option, index) => (
                  <CustomRadio
                    key={index}
                    checked={currentAnswer === option}
                    onChange={(e) => handleAnswerChange(question.id, e.target.value)}
                    value={option}
                    label={option}
                  />
              ))}
            </div>
            );
          }
          // –ï—Å–ª–∏ –æ–ø—Ü–∏–π –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∏–Ω–ø—É—Ç
          return (
            <CustomInput
              type="text"
              value={currentAnswer || ''}
              onChange={(e) => handleAnswerChange(question.id, e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={t.enterAnswer}
            />
          );

        default:
          return (
            <CustomInput
              type="text"
              value={currentAnswer || ''}
              onChange={(e) => handleAnswerChange(question.id, e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={t.enterAnswer}
            />
          );
      }
    };

    return (
      <div className="space-y-4 sm:space-y-6">
        <div className="text-center">
          <h3 className="text-lg sm:text-xl font-semibold text-gray-900 mb-2 leading-relaxed px-2">
            {question.text}
            {question.required && <span className="text-red-500 ml-1">*</span>}
          </h3>
          {question.required && !isCurrentQuestionAnswered && (
            <p className="text-xs sm:text-sm text-red-500 mt-1">
              {t.requiredField}
            </p>
          )}
          {isKeyboardOpen && (question.type === 'number' || (question.type === 'text' && (!question.options || question.options.length === 0))) && (
            <p className="text-xs text-blue-500 mt-2">
              {t.keyboardHint}
            </p>
          )}
        </div>
        <div className="max-w-md mx-auto px-2">
          {renderQuestionInput()}
        </div>
      </div>
    );
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–∫–µ–ª–µ—Ç–æ–Ω–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
  const SkeletonLoader = () => {
    console.log('ü¶¥ Rendering SkeletonLoader component');
    return (
      <div className={`bg-white border-b border-px border-gray-200 rounded-t-3xl overflow-hidden flex flex-col relative z-10 transition-all duration-500 ease-in-out`} style={{ height: '400px' }}>
        {/* –°–∫–µ–ª–µ—Ç–æ–Ω –∑–∞–≥–æ–ª–æ–≤–∫–∞ */}
        <div className="bg-gradient-to-r from-[#5538F9] to-[#7C65FF] p-4 sm:p-6 relative overflow-hidden flex-shrink-0">
          <div className="w-full">
            <div className="h-6 bg-white/20 rounded-lg mb-2 animate-pulse"></div>
            <div className="h-4 bg-white/20 rounded-lg w-1/3 mx-auto animate-pulse"></div>
          </div>
        </div>

        {/* –°–∫–µ–ª–µ—Ç–æ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ */}
        <div className="bg-gray-100 h-1">
          <div className="bg-gradient-to-r from-[#5538F9] to-[#7C65FF] h-1 w-1/4 animate-pulse"></div>
        </div>

        {/* –°–∫–µ–ª–µ—Ç–æ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */}
        <div className="flex-1 p-4 sm:p-6 bg-gray-50">
          <div className="space-y-4 sm:space-y-6">
            <div className="text-center">
              <div className="h-6 bg-gray-200 rounded-lg mb-2 animate-pulse"></div>
              <div className="h-4 bg-gray-200 rounded-lg w-2/3 mx-auto animate-pulse"></div>
            </div>
            <div className="max-w-md mx-auto px-2">
              <div className="space-y-3">
                {/* –°–∫–µ–ª–µ—Ç–æ–Ω –æ–ø—Ü–∏–π */}
                {[1, 2, 3].map((i) => (
                  <div key={i} className="flex items-center space-x-4 p-4 rounded-xl border-2 border-gray-200 animate-pulse">
                    <div className="w-6 h-6 rounded-full bg-gray-200"></div>
                    <div className="h-5 bg-gray-200 rounded-lg flex-1"></div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>

        {/* –°–∫–µ–ª–µ—Ç–æ–Ω –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
        <div className="p-4 sm:p-6 bg-white border-t border-gray-100 flex-shrink-0 pb-20">
          <div className="flex justify-between items-center mb-2 sm:mb-4">
            <div className="p-3 rounded-full bg-gray-200 animate-pulse w-12 h-12"></div>
            <div className="h-4 bg-gray-200 rounded-lg w-16 animate-pulse"></div>
            <div className="p-3 rounded-full bg-gray-200 animate-pulse w-12 h-12"></div>
          </div>
        </div>
      </div>
    );
  };

  console.log('üîç TallySurvey render state:', {
    loading,
    error,
    survey: !!survey,
    formDetails: !!formDetails,
    currentQuestionIndex,
    timestamp: new Date().toISOString()
  });

  if (loading) {
    console.log('ü¶¥ Showing skeleton loader because loading=true');
    return <SkeletonLoader />;
  }

  if (error) {
    return (
      <div className="bg-red-50 border border-red-200 rounded-lg p-4">
        <p className="text-red-600">
          {t.loadingError}
        </p>
      </div>
    );
  }

  if (isFormSubmitted) {
    return (
      <div className="bg-green-50 border border-green-200 rounded-lg p-6 text-center">
        <div className="text-green-600 text-2xl mb-2">‚úì</div>
        <p className="text-green-800 font-medium">
          {t.thankYou}
        </p>
      </div>
    );
  }

  if (!survey || !formDetails) {
    return null;
  }

  const currentQuestion = formDetails.questions[currentQuestionIndex];
  const isLastQuestion = currentQuestionIndex === formDetails.questions.length - 1;
  const isFirstQuestion = currentQuestionIndex === 0;
  const isCurrentQuestionAnswered = isCurrentQuestionValid();

  // –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –≤—ã—Å–æ—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø—Ü–∏–π
  const getModalHeight = () => {
    const currentQuestion = formDetails.questions[currentQuestionIndex];
    const questionType = getQuestionType(currentQuestion);
    
    // –ë–∞–∑–æ–≤–∞—è –≤—ã—Å–æ—Ç–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ (80px) + –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä (12px) + –Ω–∞–≤–∏–≥–∞—Ü–∏—è (100px) + –æ—Ç—Å—Ç—É–ø –¥–ª—è BottomNav (80px)
    let baseHeight = 272;
    
    // –í—ã—Å–æ—Ç–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ 60px)
    baseHeight += 60;
    
    if (questionType === 'choice' || questionType === 'multichoice') {
      const optionsCount = currentQuestion.options?.length || 0;
      if (optionsCount > 0) {
        // –í—ã—Å–æ—Ç–∞ –∫–∞–∂–¥–æ–π –æ–ø—Ü–∏–∏: 56px (padding + border) + –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É –æ–ø—Ü–∏—è–º–∏: 12px
        const optionsHeight = optionsCount * 56 + (optionsCount - 1) * 12;
        baseHeight += optionsHeight;
      }
    } else {
      // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞
      baseHeight += 80;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (24px —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É)
    baseHeight += 48;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É
    const maxHeight = window.innerHeight * 0.75;
    const minHeight = 360; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Å —É—á–µ—Ç–æ–º –æ—Ç—Å—Ç—É–ø–∞ –¥–ª—è BottomNav
    
    return Math.max(minHeight, Math.min(baseHeight, maxHeight));
  };

  const modalHeight = getModalHeight();

  return (
    <div className={`bg-white border-b border-px border-gray-200 rounded-t-3xl overflow-hidden flex flex-col relative z-10 transition-all duration-500 ease-in-out ${
      isKeyboardOpen ? 'transform -translate-y-32' : ''
    }`} style={{ height: `${modalHeight}px` }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ - –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π */}
      <div className="bg-gradient-to-r from-[#5538F9] to-[#7C65FF] p-4 sm:p-6 relative overflow-hidden flex-shrink-0">
        {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã */}
        <div className="absolute -right-8 -top-8 w-28 h-28 rounded-full bg-white/10" />
        <div className="absolute -right-16 top-6 w-40 h-40 rounded-full bg-white/10" />
        
        <div className="w-full">
          <h2 className="text-white text-lg sm:text-xl font-bold text-center relative z-10">
            {survey.title}
          </h2>
          <div className="text-white/90 text-xs sm:text-sm text-center mt-1 sm:mt-2 relative z-10">
            {t.questionCounter} {currentQuestionIndex + 1} {t.of} {formDetails.questions.length}
          </div>
        </div>
      </div>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä - —Ç–æ–Ω–∫–∏–π */}
      <div className="bg-gray-100 h-1">
        <div 
          className="bg-gradient-to-r from-[#5538F9] to-[#7C65FF] h-1 transition-all duration-500 ease-out"
          style={{ width: `${((currentQuestionIndex + 1) / formDetails.questions.length) * 100}%` }}
        />
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–æ–ø—Ä–æ—Å–∞ - –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä–æ–º */}
      <div className="flex-1 p-4 sm:p-6 overflow-y-auto bg-gray-50 custom-scrollbar">
        <QuestionComponent question={currentQuestion} />
      </div>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è - –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è */}
      <div className="p-4 sm:p-6 bg-white border-t border-gray-100 flex-shrink-0 pb-25">
        <div className="flex justify-between items-center mb-2 sm:mb-4">
          <button
            onClick={isFirstQuestion ? onClose : handlePreviousQuestion}
            className={`p-3 rounded-full font-semibold transition-all duration-200 text-sm sm:text-base flex items-center justify-center ${
              isFirstQuestion 
                ? 'bg-red-100 hover:bg-red-200 text-red-600 active:scale-95' 
                : 'bg-gray-200 hover:bg-gray-300 text-gray-700 active:scale-95'
            }`}
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
            </svg>
          </button>

          <div className="text-xs sm:text-sm text-gray-500 font-medium">
            {currentQuestionIndex + 1} / {formDetails.questions.length}
          </div>

          {isLastQuestion ? (
            <button
              onClick={handleFormSubmit}
              disabled={submitLoading || !isCurrentQuestionAnswered}
              className={`p-3 font-semibold rounded-full transition-all duration-200 active:scale-95 text-sm sm:text-base flex items-center justify-center ${
                submitLoading || !isCurrentQuestionAnswered
                ? 'bg-[#8888FC] text-white/80 cursor-not-allowed'
                : 'bg-gradient-to-r from-[#5538F9] to-[#7C65FF] hover:from-[#4A2FE8] hover:to-[#6B4FFF] text-white'
              }`}
            >
              {submitLoading ? (
                <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
              ) : (
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
              )}
            </button>
          ) : (
            <button
              onClick={handleNextQuestion}
              disabled={!isCurrentQuestionAnswered}
              className={`p-3 font-semibold rounded-full transition-all duration-200 active:scale-95 text-sm sm:text-base flex items-center justify-center ${
                !isCurrentQuestionAnswered
                  ? 'bg-[#8888FC] text-white/80 cursor-not-allowed'
                  : 'bg-gradient-to-r from-[#5538F9] to-[#7C65FF] hover:from-[#4A2FE8] hover:to-[#6B4FFF] text-white'
              }`}
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
            </button>
          )}
        </div>
      </div>
    </div>
  );
};

export default TallySurvey;
