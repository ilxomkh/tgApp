/**
 * –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Tally API
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ ID –∏ —Ä–µ–∞–ª—å–Ω—ã–º–∏ ID Tally
 */

import { useApi } from '../hooks/useApi.js';
import { useSurvey } from '../hooks/useSurvey.js';
import tallyApiService from '../services/tallyApi.js';

export const TallyApiCorrectUsage = () => {
  const { getTallyForms, getTallyFormById, loading: apiLoading, error: apiError } = useApi();
  const { getAvailableSurveys, getSurvey, loading: surveyLoading, error: surveyError } = useSurvey();

  // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–æ—Ä–º —Å —Å–µ—Ä–≤–µ—Ä–∞
  const handleGetAllForms = async () => {
    try {
      console.log('=== –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–æ—Ä–º —Å —Å–µ—Ä–≤–µ—Ä–∞ ===');
      const result = await getTallyForms();
      
      if (result.success) {
        console.log('–§–æ—Ä–º—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ:', result.data);
        
        // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–π —Ñ–æ—Ä–º–µ
        result.data.forEach(form => {
          console.log(`–§–æ—Ä–º–∞: ${form.title}`);
          console.log(`–†–µ–∞–ª—å–Ω—ã–π ID Tally: ${form.id}`);
          console.log(`URL: ${form.url || `https://tally.so/forms/${form.id}`}`);
          console.log('---');
        });
        
        return result.data;
      } else {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ä–º:', result.error);
      }
    } catch (error) {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    }
  };

  // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã –ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É ID Tally
  const handleGetFormByRealId = async (realFormId) => {
    try {
      console.log(`=== –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É ID: ${realFormId} ===`);
      const result = await getTallyFormById(realFormId);
      
      if (result.success) {
        console.log('–§–æ—Ä–º–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', result.data);
        return result.data;
      } else {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã:', result.error);
      }
    } catch (error) {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    }
  };

  // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö ID —á–µ—Ä–µ–∑ —Ö—É–∫–∏ (—Å fallback)
  const handleGetSurveyByInternalId = async (internalId) => {
    try {
      console.log(`=== –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É ID: ${internalId} ===`);
      const survey = await getSurvey(internalId);
      console.log('–û–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ:', survey);
      return survey;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞:', error);
    }
  };

  // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π fallback)
  const handleGetAvailableSurveys = async () => {
    try {
      console.log('=== –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤ ===');
      const surveys = await getAvailableSurveys();
      console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ä–æ—Å—ã:', surveys);
      return surveys;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–æ–≤:', error);
    }
  };

  // ‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –≤ API
  const handleWrongUsage = async () => {
    try {
      console.log('=== –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏) ===');
      console.log('–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ä–º—É –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É ID "registration"...');
      
      const result = await getTallyFormById('registration'); // –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É 500!
      
      if (result.success) {
        console.log('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ —Å—Ä–∞–±–æ—Ç–∞–ª–æ:', result.data);
      } else {
        console.log('–û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞:', result.error);
      }
    } catch (error) {
      console.log('–û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞:', error.message);
    }
  };

  // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ workflow
  const handleCorrectWorkflow = async () => {
    try {
      console.log('=== –ü–†–ê–í–ò–õ–¨–ù–´–ô WORKFLOW ===');
      
      // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ä–º—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
      const forms = await handleGetAllForms();
      
      if (forms && forms.length > 0) {
        const firstForm = forms[0];
        const realId = firstForm.id;
        
        console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID: ${realId}`);
        
        // –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ñ–æ—Ä–º—É –ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É ID
        await handleGetFormByRealId(realId);
        
        // –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ä–æ—Å—ã (–¥–ª—è UI)
        await handleGetAvailableSurveys();
        
        // –®–∞–≥ 4: –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ä–æ—Å –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É ID (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        await handleGetSurveyByInternalId('registration');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ workflow:', error);
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ ID —Ñ–æ—Ä–º
  const handleGetIdMapping = async () => {
    try {
      console.log('=== –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ ID —Ñ–æ—Ä–º ===');
      const mapping = await tallyApiService.getFormIdMapping();
      console.log('–ú–∞–ø–ø–∏–Ω–≥ ID —Ñ–æ—Ä–º:', mapping);
      return mapping;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞–ø–ø–∏–Ω–≥–∞:', error);
    }
  };

  return {
    handleGetAllForms,
    handleGetFormByRealId,
    handleGetSurveyByInternalId,
    handleGetAvailableSurveys,
    handleWrongUsage,
    handleCorrectWorkflow,
    handleGetIdMapping,
    loading: apiLoading || surveyLoading,
    error: apiError || surveyError
  };
};

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
export const TallyUsageExample = () => {
  const {
    handleGetAllForms,
    handleGetFormByRealId,
    handleGetSurveyByInternalId,
    handleGetAvailableSurveys,
    handleWrongUsage,
    handleCorrectWorkflow,
    handleGetIdMapping,
    loading,
    error
  } = TallyApiCorrectUsage();

  const runAllExamples = async () => {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Tally API');
    
    // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π workflow
    await handleCorrectWorkflow();
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞
    await handleGetIdMapping();
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await handleWrongUsage();
    
    console.log('‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
  };

  return {
    runAllExamples,
    handleGetAllForms,
    handleGetFormByRealId,
    handleGetSurveyByInternalId,
    handleGetAvailableSurveys,
    handleWrongUsage,
    handleCorrectWorkflow,
    handleGetIdMapping,
    loading,
    error
  };
};

export default TallyApiCorrectUsage;
