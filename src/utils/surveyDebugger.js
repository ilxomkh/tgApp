/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –æ–ø—Ä–æ—Å–∞–º–∏
 * –ü–æ–º–æ–≥–∞–µ—Ç –≤—ã—è–≤–∏—Ç—å –ø—Ä–∏—á–∏–Ω—ã –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤
 */

import { getCompletedSurveys, isSurveyCompleted } from './completedSurveys.js';
import { getSurveyGroup, shouldHideSurveyDueToGroup, getAllSurveyGroups } from './surveyGroups.js';
import api from '../services/api.js';

export class SurveyDebugger {
  constructor() {
    this.debugMode = true;
  }

  /**
   * –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤
   */
  async diagnoseSurveyIssues() {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—Ä–æ–±–ª–µ–º —Å –æ–ø—Ä–æ—Å–∞–º–∏...');
    
    const results = {
      localStorage: this.checkLocalStorage(),
      surveyGroups: this.checkSurveyGroups(),
      apiStatus: await this.checkApiStatus(),
      recommendations: []
    };

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    results.recommendations = this.generateRecommendations(results);

    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', results);
    return results;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ localStorage
   */
  checkLocalStorage() {
    const completedSurveys = getCompletedSurveys();
    const authToken = localStorage.getItem('auth_token');
    const sessionId = localStorage.getItem('session_id');
    const user = JSON.parse(localStorage.getItem('user') || '{}');

    return {
      completedSurveys,
      hasAuthToken: !!authToken,
      hasSessionId: !!sessionId,
      hasUser: !!user.id,
      userInfo: user
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥—Ä—É–ø–ø –æ–ø—Ä–æ—Å–æ–≤
   */
  checkSurveyGroups() {
    const allGroups = getAllSurveyGroups();
    const groupStats = {};

    for (const [groupId, group] of Object.entries(allGroups)) {
      const completedInGroup = group.surveys.filter(surveyId => 
        isSurveyCompleted(surveyId)
      );

      groupStats[groupId] = {
        name: group.name,
        surveys: group.surveys,
        completed: completedInGroup,
        isGroupCompleted: completedInGroup.length > 0
      };
    }

    return groupStats;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å API
   */
  async checkApiStatus() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API
      const response = await fetch('/api/health', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,
          'x-session-id': localStorage.getItem('session_id')
        }
      });

      return {
        apiAvailable: response.ok,
        status: response.status,
        error: response.ok ? null : await response.text()
      };
    } catch (error) {
      return {
        apiAvailable: false,
        error: error.message
      };
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
   */
  generateRecommendations(results) {
    const recommendations = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
    if (!results.localStorage.hasAuthToken) {
      recommendations.push({
        type: 'error',
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.',
        action: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'
      });
    }

    if (!results.localStorage.hasSessionId) {
      recommendations.push({
        type: 'warning',
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID —Å–µ—Å—Å–∏–∏. –≠—Ç–æ –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–æ–≤.',
        action: '–û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä—É–ø–ø—ã –æ–ø—Ä–æ—Å–æ–≤
    for (const [groupId, group] of Object.entries(results.surveyGroups)) {
      if (group.isGroupCompleted) {
        recommendations.push({
          type: 'info',
          message: `–ì—Ä—É–ø–ø–∞ "${group.name}" —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–∞. –û–ø—Ä–æ—Å—ã ${group.completed.join(', ')} —Å–∫—Ä—ã—Ç—ã.`,
          action: '–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ - –æ–ø—Ä–æ—Å—ã –∏–∑ –≥—Ä—É–ø–ø—ã —Å–∫—Ä—ã–≤–∞—é—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∏–∑ –Ω–∏—Ö'
        });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    if (!results.apiStatus.apiAvailable) {
      recommendations.push({
        type: 'error',
        message: 'API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–ø—Ä–æ—Å—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω—ã.',
        action: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
      });
    }

    return recommendations;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ–ø—Ä–æ—Å
   */
  async checkSpecificSurvey(surveyId) {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ä–æ—Å ${surveyId}...`);

    const checks = {
      isCompleted: isSurveyCompleted(surveyId),
      group: getSurveyGroup(surveyId),
      shouldHide: shouldHideSurveyDueToGroup(surveyId),
      apiStatus: await this.checkSurveyApiStatus(surveyId)
    };

    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø—Ä–æ—Å–∞ ${surveyId}:`, checks);
    return checks;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ API
   */
  async checkSurveyApiStatus(surveyId) {
    try {
      const response = await api.getTallyFormById(surveyId);
      return {
        available: true,
        data: response
      };
    } catch (error) {
      return {
        available: false,
        error: error.message
      };
    }
  }

  /**
   * –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–æ—Å–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  resetSurveyState() {
    localStorage.removeItem('completed_surveys');
    localStorage.removeItem('survey_groups');
    console.log('üßπ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø—Ä–æ—Å–æ–≤ —Å–±—Ä–æ—à–µ–Ω–æ');
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –æ–ø—Ä–æ—Å—ã (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É)
   */
  enableDebugMode() {
    this.debugMode = true;
    console.log('üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω - –≤—Å–µ –æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã');
  }

  /**
   * –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
   */
  disableDebugMode() {
    this.debugMode = false;
    console.log('‚úÖ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω');
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
const surveyDebugger = new SurveyDebugger();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ
export default surveyDebugger;

// –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
if (typeof window !== 'undefined') {
  window.surveyDebugger = surveyDebugger;
}
