/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞
 */

import { getDeviceInfo, isAccessAllowed, getUserPhoneNumber } from './deviceValidation';

/**
 * –í—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –∏ –¥–æ—Å—Ç—É–ø–µ –≤ –∫–æ–Ω—Å–æ–ª—å
 */
export const debugAccessControl = () => {
  const deviceInfo = getDeviceInfo();
  const userPhone = getUserPhoneNumber();
  const accessAllowed = isAccessAllowed();

  console.group('üîç Access Control Debug Info');
  console.log('üì± Device Info:', {
    userAgent: deviceInfo.userAgent,
    isMobile: deviceInfo.isMobile,
    isLocalhost: deviceInfo.isLocalhost,
    screenSize: `${deviceInfo.screenWidth}x${deviceInfo.screenHeight}`,
    hasTouch: deviceInfo.hasTouch
  });
  
  console.log('üë§ User Info:', {
    phoneNumber: userPhone,
    hasUser: !!userPhone
  });
  
  console.log('üö™ Access Status:', {
    accessAllowed: accessAllowed,
    reason: accessAllowed ? 'Access granted' : 'Access denied'
  });
  
  console.log('üìã Access Rules:', {
    localhost: deviceInfo.isLocalhost,
    mobile: deviceInfo.isMobile,
    allowedPhone: userPhone === '+998336832000'
  });
  
  console.groupEnd();
  
  return {
    deviceInfo,
    userPhone,
    accessAllowed
  };
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
 * @returns {Object}
 */
export const checkAccessDetailed = () => {
  const deviceInfo = getDeviceInfo();
  const userPhone = getUserPhoneNumber();
  const accessAllowed = isAccessAllowed();

  const reasons = [];
  
  if (deviceInfo.isLocalhost) {
    reasons.push('localhost access');
  }
  
  if (deviceInfo.isMobile) {
    reasons.push('mobile device');
  }
  
  if (userPhone === '+998336832000') {
    reasons.push('allowed phone number');
  }

  return {
    accessAllowed,
    reasons,
    deviceInfo,
    userPhone,
    message: accessAllowed 
      ? `Access granted: ${reasons.join(', ')}`
      : 'Access denied: not mobile device and not allowed user'
  };
};

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ window –æ–±—ä–µ–∫—Ç
 */
export const addDebugToWindow = () => {
  if (typeof window !== 'undefined') {
    window.debugAccess = debugAccessControl;
    window.checkAccess = checkAccessDetailed;
    
    console.log('üîß Debug functions added to window:');
    console.log('- window.debugAccess() - show detailed access info');
    console.log('- window.checkAccess() - check access with reasons');
  }
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ª–∞–¥–∫–∏ –≤ development —Ä–µ–∂–∏–º–µ
if (import.meta.env.DEV) {
  addDebugToWindow();
}
